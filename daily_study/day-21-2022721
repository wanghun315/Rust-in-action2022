# 2022-07-21

## 学习进度

- 开始lab0-1的搭建，结果又一次pass，难道不用做题吗？

## 知识积累
### 平台与目标三元组
1. 编译时调用 rustc --version --verbose 可查看目标平台
2. 切换目标平台（riscv64gc-unknown-none-elf）
    ```
    //.cargo文件夹下的config
    // 默认使用target 编译，x86_64下编译其他目标平台的执行文件，称为交叉编译(Cross Compile)
    [build]
    target = "riscv64gc-unknown-none-elf"
    
   // 设置正确的内存布局 通过脚本连接调整连接器的行为
    [target.riscv64gc-unknown-none-elf]
    rustflags = [
        "-Clink-arg=-Tsrc/linker.ld", "-Cforce-frame-pointers=yes"
    ]
    // linker.ld大致说明：
    // OUTPUT_ARCH(riscv) 目标平台为riscv
    // ENTRY(_start)程序的入口点为全局的_start(entry.asm中定义的)
    // 定义常量 BASE_ADDRESS 为 0x80200000 ，RustSBI 期望的 OS 起始地址
    // 代码段 .text, 只读数据段 .rodata，数据段 .data, bss 段 .bss 由低到高依次放置， 
    // 且每个段都有两个全局变量给出其起始和结束地址（比如 .text 段的开始和结束地址分别是 stext 和 etext ）
    
    // 配置栈空间布局
    // src/entry.asm
        .section .text.entry
        .globl _start
    _start:
        la sp, boot_stack_top
        call rust_main
    
        .section .bss.stack
        .globl boot_stack
    boot_stack:
        .space 4096 * 16
        .globl boot_stack_top
    boot_stack_top:    
    // 4096 * 16: 预留了一块64kib的空间用作操作系统的栈空间
    // 栈顶地址被全局符号boot_stack_top标识
    // 栈底则被全局符号boot_stack标识,这块栈空间被命名为.bss.stack
    // _start 作为操作系统的入口地址，放在了BASE_ADDRESS位置
    // la sp, boot_stack_top 将sp设置为栈空间的栈顶，内存溢出需要考虑
    // call rust_main 调用rust_main函数，程序入口
   
    // main.rs 新增
    // 使用global_asm宏将entry.asm嵌入到代码中
    core::arch::global_asm!(include_str!("entry.asm"));
    pub fn rust_main() -> !{}
    ```
- 清空.bss段 : 由于内存部分太容易出错，因此每次都必须清零
  ```rust
  fn clear_bss(){
    extern "c"{
        fn sbss();
        fn ebss();
    }
    (sbss as usize..ebss as usize).for_each(|a| {
        unsafe{
            (a as *mut u8).write_volatile(0)
        }
    });
  }
  // main.rs 中添加 clear_bss();
  ```
3. 移除println!宏
- 在main.rs开头添加#![no_std] 告诉编译器不适用Rust标准库而使用核心库core
4. lang_items.rs 错误处理函数
    ```rust
   // os/src/lang_items.rs
   // 标记 #[panic_handler] 告知编译器采用我们的实现 
   use core::panic::PanicInfo;
    
    #[panic_handler]
    fn panic(_info: &PanicInfo) -> ! {
        loop {}
    }
   
   // main.rs中添加引用
   // os/src/main.rs
   #![no_std]
   mod lang_items;
    ```
5. 移除main函数,并添加入口函数
    ```rust
    // src/main.rs
   #![no_main]
   
   // 入口函数
   #[no_mangle]
   pub fn rust_main() -> ! {}
    ```
6. 添加退出机制
   ```rust
   const SYSCALL_EXIT: usize = 93;
   fn syscall(id: usize, args: [usize; 3]) -> isize{
    let mut ret;
    // RISC-V 编号为0-31 表示为：x0-x31 
    // x10-x17 对应 a0-a7
    // x1 对应ra
    // 约定a0-a6 保存系统调用的参数
    // a0 保存系统调用的返回值
    // a7 用来传递syscall ID
    // 返回寄存器a0传递给局部变量ret
    unsafe{
        core::arch::asm!(
            "ecall"
            inlateout("x10") args[0] => ret,
            in("x11") args[1],
            in("x12") args[2],
            in("x17") id,
        );
    }
    ret
   }
   fn sys_exit(xstate: i32)->isize{
    syscall(SYSCALL_EXIT, [xstate as usize, 0, 0])
   }
   #[no_mangle]
   pub fn main(){
    sys_exit(9);
   }
   ```
7. 实现printlnt!功能
- 封装SYSCALL_WRITE系统调用
    ```rust
  // main.rs
  const SYSCALL_WRITE: usize = 64;
  pub fn sys_wirte(fd: usize, buffer: &[u8]) -> isize{
    syscall(SYSCALL_WRITE, [fd, buffer.as_ptr() as usize, buffer.len()])
  }  
  ```
- 实现Rust语言的格式化宏
  ```rust
  // src/console.rs
  use core::fmt::{Write, Arguments, Result};
  use crate::sys_wirte;
  
  struct Stdout;
  impl Write for Stdout{
    fn write_str(&mut self, s: &str) -> Result{
        sys_write(1, s.as_bytes());
        Ok(())
    }
  }
  pub fn print(args: Arguments){
    Stdout.write_fmt(args).uwrap();
  }
  
  macro_rules! print{
    ($fmt: literal $(, $($arg: tt)+)?) =>{
        $crate::console::print(format_args!($fmt $(, $($arg)+)?));
    }
  }
  macro_rules! println{
    ($fmt: literal $(, $($arg: tt)+)?) =>{
      $crate::console::print(format_args!(concat!($fmt, "\n") $(, $($arg)+)?));
    }
  }
  
  //调用
  //main.rs
  mod console；
  println!("");
  ```  
8. 添加打印相关函数
### 使用内核态  
1. Makefile 文件
    ```makefile
    // 加电，CPU的通用寄存器清零，PC指向0x1000（有固化再硬件中的一小段引导代码）-> 跳转到RustSBI（0x80000000）-> 硬件加载完成后跳转到$(KERNEL_BIN) 所在内存位置 0x80200000，执行第一条指令
    // -bios $(BOOTLOADER) 硬件加载一个BootLoader程序，即RustSBI
    // -device loader,file=$(KERNEL_BIN),addr=$(KERNEL_ENTRY_PA) 表示硬件内存中的特定位置
    // $(KERNEL_ENTRY_PA) 放置了操作系统的二进制代码 $(KERNEL_BIN) 。 $(KERNEL_ENTRY_PA) 的值是 0x80200000
    run: build
        @qemu-system-riscv64 \
            -machine virt \
            -nographic \
            -bios $(BOOTLOADER) \
            -device loader,file=$(KERNEL_BIN),addr=$(KERNEL_ENTRY_PA) \
            -drive file=$(FS_IMG),if=none,format=raw,id=x0 \
            -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0
    ```
### QEMU
1. 运行模式
```rust
QEMU有两种运行模式：
User mode 模式，即用户态模拟，如 qemu-riscv64 程序， 能够模拟不同处理器的用户态指令的执行，并可以直接解析ELF可执行文件， 加载运行那些为不同处理器编译的用户级Linux应用程序。
System mode 模式，即系统态模式，如 qemu-system-riscv64 程序， 能够模拟一个完整的基于不同CPU的硬件系统，包括处理器、内存及其他外部设备，支持运行完整的操作系统。
```
### 分析程序--cargo-binutils
```rust
[文件格式]
$ file target/riscv64gc-unknown-none-elf/debug/os
target/riscv64gc-unknown-none-elf/debug/os: ELF 64-bit LSB executable, UCB RISC-V, ......

[文件头信息]
$ rust-readobj -h target/riscv64gc-unknown-none-elf/debug/os
   File: target/riscv64gc-unknown-none-elf/debug/os
   Format: elf64-littleriscv
   Arch: riscv64
   AddressSize: 64bit
   ......
   Type: Executable (0x2)
   Machine: EM_RISCV (0xF3)
   Version: 1
   Entry: 0x0
   ......
   }

[反汇编导出汇编程序]
$ rust-objdump -S target/riscv64gc-unknown-none-elf/debug/os
   target/riscv64gc-unknown-none-elf/debug/os:       file format elf64-littleriscv
```
